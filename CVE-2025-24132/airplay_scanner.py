#!/usr/bin/env python3
"""
AirPlay Device Scanner - Educational Tool

This script demonstrates how to scan a network for AirPlay-enabled devices
for educational and security research purposes only.
Only use on networks you own or have explicit permission to scan.
"""

import socket
import sys
import subprocess
import re
import time
from concurrent.futures import ThreadPoolExecutor
import argparse
import json
import ipaddress
import os

# Try to import zeroconf (will show installation message if missing)
try:
    from zeroconf import ServiceBrowser, Zeroconf
except ImportError:
    print("Required package 'zeroconf' is not installed.")
    print("Please install it with: pip install zeroconf")
    sys.exit(1)

# Colors for terminal output
class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

class AirPlayScanner:
    def __init__(self):
        self.discovered_devices = {}
        self.airplay_ports = [5000, 7000, 7100, 49152, 49153]
        self.vulnerable_signatures = [
            {"version": "AirPlay SDK < 2.7.1", "risk": "HIGH", "cve": "CVE-2025-24132"},
            {"version": "AirPlay Video SDK < 3.6.0.126", "risk": "HIGH", "cve": "CVE-2025-24132"}
        ]
        
    def get_local_ip(self):
        """Get the local IP address of this machine"""
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        try:
            # doesn't need to be reachable
            s.connect(('10.255.255.255', 1))
            IP = s.getsockname()[0]
        except Exception:
            IP = '127.0.0.1'
        finally:
            s.close()
        return IP
    
    def get_network_range(self, ip_address):
        """Convert IP address to network range for scanning"""
        try:
            # Assume a /24 network
            network = ipaddress.IPv4Network(f"{ip_address.rsplit('.', 1)[0]}.0/24", strict=False)
            return network
        except Exception as e:
            print(f"{Colors.FAIL}Error determining network range: {e}{Colors.ENDC}")
            sys.exit(1)
    
    def scan_port(self, ip, port):
        """Scan a single IP and port combination"""
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(0.5)
        result = sock.connect_ex((ip, port))
        sock.close()
        return port if result == 0 else None
    
    def scan_target(self, ip):
        """Scan an IP for AirPlay ports"""
        open_ports = []
        for port in self.airplay_ports:
            port_result = self.scan_port(ip, port)
            if port_result:
                open_ports.append(port_result)
                
        if open_ports:
            if ip not in self.discovered_devices:
                self.discovered_devices[ip] = {
                    "ip": ip,
                    "open_ports": open_ports,
                    "detection_method": "port_scan",
                    "device_type": "Unknown AirPlay Device",
                    "potentially_vulnerable": True
                }
            else:
                self.discovered_devices[ip]["open_ports"] = open_ports
    
    def scan_network(self):
        """Scan the local network for AirPlay devices"""
        local_ip = self.get_local_ip()
        network = self.get_network_range(local_ip)
        
        print(f"{Colors.HEADER}Scanning network {network} for AirPlay devices...{Colors.ENDC}")
        print(f"{Colors.HEADER}This may take a few minutes...{Colors.ENDC}")
        
        with ThreadPoolExecutor(max_workers=100) as executor:
            for ip in network.hosts():
                executor.submit(self.scan_target, str(ip))
    
    def mdns_discovery(self):
        """Use mDNS to discover AirPlay services"""
        print(f"{Colors.HEADER}Looking for AirPlay devices with mDNS...{Colors.ENDC}")
        
        class AirPlayListener:
            def __init__(self, scanner):
                self.scanner = scanner
                
            def add_service(self, zeroconf, service_type, name):
                info = zeroconf.get_service_info(service_type, name)
                if info:
                    addresses = [f"{socket.inet_ntoa(addr)}" for addr in info.addresses]
                    for address in addresses:
                        if address not in self.scanner.discovered_devices:
                            self.scanner.discovered_devices[address] = {
                                "ip": address,
                                "hostname": info.server,
                                "device_type": "AirPlay Device",
                                "detection_method": "mDNS",
                                "service_name": name,
                                "port": info.port,
                                "open_ports": [info.port],
                                "txt_records": {k.decode('utf-8'): v.decode('utf-8') 
                                              for k, v in info.properties.items()},
                                "potentially_vulnerable": True
                            }
                            
                            # Check for AirPlay SDK version
                            txt = self.scanner.discovered_devices[address]["txt_records"]
                            if 'model' in txt and 'version' in txt:
                                model = txt['model']
                                version = txt['version']
                                
                                # Determine if potentially vulnerable
                                for signature in self.scanner.vulnerable_signatures:
                                    if 'SDK' in model and version.split('.') < signature["version"].split('SDK')[1].strip().split('.'):
                                        self.scanner.discovered_devices[address]["risk_level"] = signature["risk"]
                                        self.scanner.discovered_devices[address]["cve"] = signature["cve"]
        
        zeroconf = Zeroconf()
        listener = AirPlayListener(self)
        browser_airplay = ServiceBrowser(zeroconf, "_airplay._tcp.local.", listener)
        browser_raop = ServiceBrowser(zeroconf, "_raop._tcp.local.", listener)
        
        # Give mDNS some time to discover devices
        time.sleep(3)
        zeroconf.close()
    
    def list_discovered_devices(self):
        """Print information about discovered devices"""
        if not self.discovered_devices:
            print(f"{Colors.WARNING}No AirPlay devices discovered.{Colors.ENDC}")
            return
            
        print(f"\n{Colors.HEADER}{Colors.BOLD}Discovered AirPlay Devices:{Colors.ENDC}")
        print("-" * 80)
        
        for ip, device in self.discovered_devices.items():
            if device.get("potentially_vulnerable", False):
                risk_indicator = f"{Colors.FAIL}POTENTIALLY VULNERABLE{Colors.ENDC}"
                if "risk_level" in device:
                    risk_indicator = f"{Colors.FAIL}{device['risk_level']} RISK{Colors.ENDC}"
            else:
                risk_indicator = f"{Colors.OKGREEN}PATCHED{Colors.ENDC}"
                
            print(f"Device: {Colors.BOLD}{device.get('device_type', 'Unknown AirPlay Device')}{Colors.ENDC}")
            print(f"IP Address: {ip}")
            print(f"Open AirPlay Ports: {', '.join(map(str, device.get('open_ports', [])))}")
            print(f"Detection Method: {device.get('detection_method', 'Unknown')}")
            
            if "hostname" in device:
                print(f"Hostname: {device['hostname']}")
            if "txt_records" in device and device["txt_records"]:
                print(f"Device Info: {json.dumps(device['txt_records'], indent=2)}")
            if "cve" in device:
                print(f"Potential CVE: {device['cve']}")
                
            print(f"Security Status: {risk_indicator}")
            print("-" * 80)
    
    def export_results(self, filename):
        """Export results to a JSON file"""
        with open(filename, 'w') as f:
            json.dump(self.discovered_devices, f, indent=4)
        print(f"{Colors.OKGREEN}Results exported to {filename}{Colors.ENDC}")
    
    def scan(self):
        """Run a complete scan"""
        self.mdns_discovery()
        self.scan_network()
        self.list_discovered_devices()

def main():
    parser = argparse.ArgumentParser(description='AirPlay Device Scanner - Educational Tool')
    parser.add_argument('-o', '--output', help='Output file for scan results')
    parser.add_argument('-m', '--mdns-only', action='store_true', help='Only use mDNS discovery (faster but less thorough)')
    args = parser.parse_args()
    
    print(f"""
{Colors.HEADER}{Colors.BOLD}AirPlay Device Scanner{Colors.ENDC}
{Colors.WARNING}Educational security tool to identify potentially vulnerable AirPlay devices{Colors.ENDC}
{Colors.WARNING}Use responsibly and only on networks you own or have permission to scan{Colors.ENDC}
    """)
    
    scanner = AirPlayScanner()
    
    if args.mdns_only:
        scanner.mdns_discovery()
    else:
        scanner.scan()
        
    scanner.list_discovered_devices()
    
    if args.output:
        scanner.export_results(args.output)

if __name__ == "__main__":
    main()
